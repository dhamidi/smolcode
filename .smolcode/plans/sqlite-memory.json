{
  "id": "sqlite-memory",
  "steps": [
    {
      "id": "setup-package",
      "description": "Create the `memory` package directory and `memory.go` file.",
      "status": "DONE",
      "acceptance": [
        "Directory `memory/` exists.",
        "File `memory/memory.go` exists with initial package declaration."
      ]
    },
    {
      "id": "add-dependency",
      "description": "Add the necessary SQLite driver dependency.",
      "status": "DONE",
      "acceptance": [
        "`go get github.com/mattn/go-sqlite3` command is run successfully.",
        "`go.mod` and `go.sum` are updated."
      ]
    },
    {
      "id": "define-structs",
      "description": "Define the `MemoryManager` and `Memory` structs in `memory/memory.go`, following the pattern of `planner/planner.go`.",
      "status": "DONE",
      "acceptance": [
        "`MemoryManager` struct defined with a field for the database connection.",
        "`Memory` struct defined (e.g., with ID and Content fields)."
      ]
    },
    {
      "id": "implement-constructor",
      "description": "Implement the `New` constructor for `MemoryManager`. This function should open the SQLite database (e.g., `.smolcode/memory.db`) and initialize the schema, including the `memories` table and the `memories_fts` FTS5 virtual table.",
      "status": "DONE",
      "acceptance": [
        "`New(dbPath string) (*MemoryManager, error)` function is implemented.",
        "Function attempts to open/create the SQLite DB file.",
        "Function executes SQL to create `memories` table if not exists.",
        "Function executes SQL to create `memories_fts` virtual table using FTS5 if not exists."
      ]
    },
    {
      "id": "implement-close",
      "description": "Implement a `Close()` method on `MemoryManager` to properly close the database connection.",
      "status": "DONE",
      "acceptance": [
        "`Close() error` method is added to `MemoryManager`.",
        "Method calls the `Close()` method on the underlying database connection."
      ]
    },
    {
      "id": "implement-add",
      "description": "Implement the `AddMemory(id string, content string) error` method on `MemoryManager` to insert or replace memories in the database.",
      "status": "DONE",
      "acceptance": [
        "`AddMemory` method is implemented.",
        "Method uses SQL `INSERT OR REPLACE` (or similar logic) to add/update a row in the `memories` table.",
        "Corresponding data is implicitly updated in the FTS table by SQLite."
      ]
    },
    {
      "id": "implement-get",
      "description": "Implement the `GetMemoryByID(id string) (*Memory, error)` method on `MemoryManager` to retrieve a specific memory by its ID.",
      "status": "DONE",
      "acceptance": [
        "`GetMemoryByID` method is implemented.",
        "Method queries the `memories` table for the given ID.",
        "Returns a `*Memory` struct or an error (e.g., if not found)."
      ]
    },
    {
      "id": "implement-search",
      "description": "Implement the `SearchMemory(query string) ([]*Memory, error)` method on `MemoryManager` to perform a full-text search using FTS5.",
      "status": "DONE",
      "acceptance": [
        "`SearchMemory` method is implemented.",
        "Method queries the `memories_fts` virtual table using `MATCH ?`.",
        "Retrieves matching `id` and `content` (likely by joining back to `memories` or querying `memories_fts` directly if content is stored there).",
        "Returns a slice of `*Memory` structs or an error."
      ]
    }
  ]
}