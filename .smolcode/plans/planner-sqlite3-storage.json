{
  "id": "planner-sqlite3-storage",
  "steps": [
    {
      "id": "define-db-schema",
      "description": "Finalize and document the SQLite3 database schema in a schema.sql file.",
      "status": "DONE",
      "acceptance": [
        "schema.sql file created with CREATE TABLE statements for plans, steps, and step_acceptance_criteria.",
        "Relationships and constraints (PRIMARY KEY, FOREIGN KEY, NOT NULL, CHECK) are defined.",
        "Indexes are defined for performance."
      ]
    },
    {
      "id": "modify-planner-struct",
      "description": "Modify the Planner struct and New() function to use a SQLite database connection instead of a storage directory.",
      "status": "DONE",
      "acceptance": [
        "Planner struct contains a *sql.DB field.",
        "New() function accepts a database path string.",
        "New() function initializes the database connection and creates tables if they don't exist using schema.sql."
      ]
    },
    {
      "id": "implement-plan-create",
      "description": "Implement the Create method to insert a new plan into the 'plans' table.",
      "status": "DONE",
      "acceptance": [
        "Create method takes a plan name.",
        "Inserts a new row into the 'plans' table.",
        "Returns an in-memory Plan object."
      ]
    },
    {
      "id": "implement-plan-get",
      "description": "Implement the Get method to retrieve a plan and its steps from the database.",
      "status": "DONE",
      "acceptance": [
        "Get method takes a plan name.",
        "Queries 'plans', 'steps', and 'step_acceptance_criteria' tables.",
        "Reconstructs the Plan struct with its Steps, maintaining order and acceptance criteria."
      ]
    },
    {
      "id": "implement-plan-save",
      "description": "Implement the Save method to persist changes to a plan and its steps in the database using a transaction.",
      "status": "DONE",
      "acceptance": [
        "Save method takes a Plan object.",
        "Uses a database transaction.",
        "Updates the 'plans' table.",
        "Synchronizes 'steps' table (INSERT, UPDATE, DELETE).",
        "Synchronizes 'step_acceptance_criteria' table (INSERT, UPDATE, DELETE based on step changes)."
      ]
    },
    {
      "id": "update-step-manipulation-methods",
      "description": "Update step manipulation methods (MarkAsCompleted, MarkAsIncomplete, AddStep, RemoveSteps, Reorder) to interact with the database.",
      "status": "DONE",
      "acceptance": [
        "MarkAsCompleted/Incomplete updates 'status' in 'steps' table.",
        "AddStep modifies in-memory plan; Save handles DB insertion.",
        "RemoveSteps modifies in-memory plan; Save handles DB deletion.",
        "Reorder updates 'step_order' in 'steps' table."
      ]
    },
    {
      "id": "implement-plan-list",
      "description": "Implement the List method to retrieve summary information for all plans from the database.",
      "status": "DONE",
      "acceptance": [
        "List method queries 'plans' and 'steps' tables.",
        "Calculates TotalTasks and CompletedTasks for each plan.",
        "Returns a slice of PlanInfo structs."
      ]
    },
    {
      "id": "implement-plan-remove",
      "description": "Implement the Remove method to delete plans from the database.",
      "status": "DONE",
      "acceptance": [
        "Remove method takes a slice of plan names.",
        "Deletes corresponding rows from the 'plans' table (cascading to steps and criteria)."
      ]
    },
    {
      "id": "implement-plan-compact",
      "description": "Implement the Compact method to remove completed plans from the database.",
      "status": "DONE",
      "acceptance": [
        "Compact method identifies plans where all steps are 'DONE'.",
        "Deletes these completed plans from the 'plans' table."
      ]
    },
    {
      "id": "refactor-tests",
      "description": "Refactor existing planner tests or create new ones to ensure they work with the SQLite3 backend.",
      "status": "DONE",
      "acceptance": [
        "All relevant planner tests pass.",
        "Tests cover database interactions, including edge cases and error handling."
      ]
    },
    {
      "id": "update-documentation",
      "description": "Update any relevant documentation (e.g., READMEs, code comments) to reflect the new SQLite3 storage mechanism for plans.",
      "status": "DONE",
      "acceptance": [
        "Documentation accurately describes the planner's new database backend.",
        "Instructions for setting up or using the planner with the database are clear."
      ]
    }
  ]
}